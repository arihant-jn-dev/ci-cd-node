# GitHub Actions CI/CD Pipeline for Node.js
# This workflow demonstrates a complete CI/CD pipeline with build, test, and deploy stages

name: Node.js CI/CD Pipeline

# Trigger the workflow on push to main branch and on pull requests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Define the jobs that will run in this workflow
jobs:
  # JOB 1: BUILD
  # This job handles dependency installation and project building
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Get the source code from the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Step 2: Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Use Node.js version 20 LTS
          cache: 'npm'        # Cache npm dependencies for faster builds
          
      # Step 3: Install dependencies
      # npm ci is used instead of npm install for faster, reliable, reproducible builds
      - name: Install dependencies
        run: npm ci
        
      # Step 4: Run build script
      # In a real application, this might compile TypeScript, bundle assets, etc.
      - name: Build application
        run: npm run build

  # JOB 2: TEST
  # This job runs the test suite to ensure code quality
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build  # This job depends on the build job completing successfully
    
    steps:
      # Step 1: Get the source code
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Step 2: Set up Node.js (same version as build job)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci
        
      # Step 4: Run the test suite
      - name: Run tests
        run: npm test
        
      # Optional: Generate test coverage report
      # Uncomment the following lines if you add a coverage tool like nyc or jest
      # - name: Generate coverage report
      #   run: npm run test:coverage
      #
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3

  # JOB 3: DEPLOY
  # This job handles deployment to production (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test  # This job depends on tests passing
    # Only run this job on pushes to main branch (not on pull requests)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      # Step 1: Get the source code
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci
        
      # Step 4: Build for production (if needed)
      - name: Build for production
        run: npm run build
        
      # Step 5: Deploy to production
      # This is a placeholder - replace with your actual deployment commands
      - name: Deploy application
        run: |
          echo "ðŸš€ Deploying to production..."
          echo "âœ… Application deployed successfully!"
          
      # Example deployment options (uncomment and modify as needed):
      
      # Deploy to Heroku
      # - name: Deploy to Heroku
      #   uses: akhileshns/heroku-deploy@v3.12.14
      #   with:
      #     heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
      #     heroku_app_name: "your-app-name"
      #     heroku_email: "your-email@example.com"
      
      # Deploy to AWS
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-1
      
      # Deploy to DigitalOcean
      # - name: Deploy to DigitalOcean
      #   run: |
      #     # SSH into your server and deploy
      #     echo "Deploying to DigitalOcean droplet..."
      
      # Deploy using Docker
      # - name: Build and push Docker image
      #   run: |
      #     docker build -t your-app:latest .
      #     docker push your-registry/your-app:latest

  # Optional: SECURITY JOB
  # Uncomment this job to add security scanning
  # security:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   needs: build
  #   
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       
  #     - name: Run security audit
  #       run: npm audit --audit-level moderate
  #       
  #     - name: Run Snyk to check for vulnerabilities
  #       uses: snyk/actions/node@master
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# Environment variables that can be used across all jobs
env:
  NODE_ENV: production

# Note: To use this workflow effectively, you may need to set up the following secrets
# in your GitHub repository settings (Settings > Secrets and variables > Actions):
# - HEROKU_API_KEY (if deploying to Heroku)
# - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY (if deploying to AWS)
# - SNYK_TOKEN (if using Snyk for security scanning)
# - Any other deployment-specific secrets
